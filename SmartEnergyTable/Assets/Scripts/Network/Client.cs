using System.Threading.Tasks;
using Grpc.Core;
using UnityEngine;

namespace Network
{
    ///Function pattern for the patch callback.
    public delegate void UpdateCallback(Patch patch);

    /// <summary>
    /// Client implements all gRPC methods defined in the .proto file
    /// </summary>
    public class Client
    {
        private readonly SmartEnergyTableService.SmartEnergyTableServiceClient _client;

        public Client(SmartEnergyTableService.SmartEnergyTableServiceClient client)
        {
            _client = client;
        }

        ///<summary> RPC to create a new room</summary>
        internal RoomUser CreateRoom()
        {
            return _client.CreateRoom(new Empty());
        }

        /// <summary>
        /// RPC to join an existing room.
        /// </summary>
        /// <param name="roomId">the ID corresponding to the room.</param>
        /// <param name="userId">a GUID generated by the client to indicate the user in the room.</param>
        /// <param name="callback">a delegate function used to callback an update.</param>
        /// <returns></returns>
        internal async Task JoinRoom(string roomId, string userId, UpdateCallback callback)
        {
            try
            {
                using (var call = _client.JoinRoom(new RoomUser {Id = roomId, UserId = userId}))
                {
                    while (true)
                    {
                        await call.ResponseStream.MoveNext();

                        var s = call.ResponseStream.Current;
                        callback.Invoke(call.ResponseStream.Current);
                    }
                }
            }
            catch (RpcException e)
            {
                Debug.Log("RPC failed" + e);
            }
        }

        /// <summary>
        /// RPC to save the room in the server.
        /// </summary>
        /// <param name="user">the room contains the ID of the room that should be saved.</param>
        /// <returns></returns>
        internal Empty SaveRoom(RoomUser user)
        {
            var empty = _client.SaveRoom(user);
            return empty;
        }

        /// <summary>
        /// RPC to add a token to the current room.
        /// </summary>
        /// <param name="roomId">the ID of the room where this function should be executed.</param>
        /// <param name="userId">the GUID generated by the client should be corresponding to the master in the room.</param>
        /// <param name="index">index in the objectLibrary that contains the prefabs.</param>
        /// <param name="position">UnityEngine version of the Vector3. This contains the x,y,z coordinates where the token should be placed</param>
        /// <returns></returns>
        internal Empty AddToken(string roomId, string userId, int index, int efficiency, Vector3 position)
        {
            var empty = _client.AddToken(new Token
            {
                RoomUser = new RoomUser {Id = roomId, UserId = userId},
                ObjectIndex = index,
                Position = new Vector3_Protocol
                {
                    X = position.x, Y = position.y, Z = position.z
                },
                Efficiency = efficiency
            });
            return empty;
        }

        /// <summary>
        /// RPC to remove a token from the current room.
        /// </summary>
        /// <param name="roomId">the ID of the room where this function should be executed.</param>
        /// <param name="userId">the GUID generated by the client should be corresponding to the master in the room.</param>
        /// <param name="uuid">the uuid from the token. This uuid is generated server-side when the AddToken RPC is called.</param>
        /// <returns></returns>
        internal Empty RemoveToken(string roomId, string userId, string uuid)
        {
            var empty = _client.RemoveToken(new Token
            {
                RoomUser = new RoomUser {Id = roomId, UserId = userId},
                ObjectId = uuid
            });
            return empty;
        }

        /// <summary>
        /// RPC to move a token in the current room.
        /// </summary>
        /// <param name="roomId">the ID of the room where this function should be executed.</param>
        /// <param name="userId">the GUID generated by the client should be corresponding to the master in the room.</param>
        /// <param name="uuid">the uuid from the token. This uuid is generated server-side when the AddToken RPC is called.</param>
        /// <param name="position">UnityEngine version of the Vector3. This contains the x,y,z coordinates where the token should be moved to.</param>
        /// <returns></returns>
        internal Empty MoveToken(string roomId, string userId, string uuid, Vector3 position)
        {
            var empty = _client.MoveToken(new Token
            {
                RoomUser = new RoomUser {Id = roomId, UserId = userId},
                ObjectId = uuid,
                Position = new Vector3_Protocol
                {
                    X = position.x, Y = position.y, Z = position.z
                }
            });
            return empty;
        }


        /// <summary>
        /// RPC to clear a room of all tokens.
        /// </summary>
        /// <param name="roomId">the ID of the room where this function should be executed.</param>
        /// <param name="userId">the GUID generated by the client should be corresponding to the master in the room.</param>
        /// <returns></returns>
        internal Empty ClearRoom(string roomId, string userId)
        {
            var empty = _client.ClearRoom(new RoomUser
            {
                Id = roomId,
                UserId = userId
            });
            return empty;
        }


        /// <summary>
        /// RPC to change the scene in all clients
        /// </summary>
        /// <param name="roomId">the ID of the room where this function should be executed.</param>
        /// <param name="userId">the GUID generated by the client should be corresponding to the master in the room.</param>
        /// <param name="sceneId">an integer indicated the sceneBuildIndex from Unity.</param>
        /// <returns></returns>
        internal Empty ChangeScene(string roomId, string userId, int sceneId)
        {
            var empty = _client.ChangeScene(new Scene
            {
                RoomUser = new RoomUser {Id = roomId, UserId = userId},
                SceneId = sceneId
            });
            return empty;
        }

        /// <summary>
        /// RPC to move all users to a position
        /// </summary>
        /// <param name="roomId">the ID of the room where this function should be executed.</param>
        /// <param name="userId">the GUID generated by the client should be corresponding to the master in the room.</param>
        /// <param name="newPosition">UnityEngine version of the Vector3. This contains the x,y,z coordinates where the users should be moved to.</param>
        /// <returns></returns>
        internal Empty MoveUsers(string roomId, string userId, Vector3 newPosition)
        {
            var empty = _client.MoveUsers(new UserPosition
            {
                RoomUser = new RoomUser
                {
                    Id = roomId,
                    UserId = userId
                },
                NewPosition = new Vector3_Protocol
                {
                    X = newPosition.x, Y = newPosition.y, Z = newPosition.z
                }
            });
            return empty;
        }

        /// <summary>
        /// RPC to change the master of the room.
        /// </summary>
        /// <param name="roomId">the ID of the room where this function should be executed.</param>
        /// <param name="userId">the GUID generated by the client should be corresponding to the master in the room.</param>
        /// <param name="newMasterId">the id of the new master.</param>
        /// <returns></returns>
        internal Empty ChangeMaster(string roomId, string userId, string newMasterId)
        {
            var empty = _client.ChangeMaster(new MasterSwitch
                {Id = roomId, MasterId = userId, NewMasterId = newMasterId});
            return empty;
        }

        /// <summary>
        /// RPC to leave the room
        /// </summary>
        /// <param name="roomId">the ID corresponding to the room.</param>
        /// <param name="userId">a GUID generated by the client to indicate the user in the room.</param>
        /// <returns></returns>
        internal Empty LeaveRoom(string roomId, string userId)
        {
            var empty = _client.LeaveRoom(new RoomUser {Id = roomId, UserId = userId});
            return empty;
        }

        /// <summary>
        /// RPC to get the energy data
        /// </summary>
        /// <param name="roomId">the ID corresponding to the room.</param>
        /// <param name="userId">a GUID generated by the client to indicate the user in the room.</param>
        /// <returns>EnergyData which is a wrapper around the summary and the hourly demands</returns>
        internal EnergyData GetEnergyData(string roomId, string userId)
        {
            var data = _client.GetEnergyData(new RoomUser {Id = roomId, UserId = userId});
            return data;
        }
    }
}