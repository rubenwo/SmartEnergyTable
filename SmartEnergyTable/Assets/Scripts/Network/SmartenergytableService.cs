// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: smartenergytable-service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from smartenergytable-service.proto</summary>
public static partial class SmartenergytableServiceReflection {

  #region Descriptor
  /// <summary>File descriptor for smartenergytable-service.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SmartenergytableServiceReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch5zbWFydGVuZXJneXRhYmxlLXNlcnZpY2UucHJvdG8iBwoFRW1wdHkiuwEK",
          "BVRva2VuEhwKCXJvb21fdXNlchgBIAEoCzIJLlJvb21Vc2VyEhQKDG9iamVj",
          "dF9pbmRleBgCIAEoBRIjCghwb3NpdGlvbhgDIAEoCzIRLlZlY3RvcjNfUHJv",
          "dG9jb2wSEQoJb2JqZWN0X2lkGAQgASgJEiMKCHJvdGF0aW9uGAUgASgLMhEu",
          "VmVjdG9yM19Qcm90b2NvbBINCgVzY2FsZRgGIAEoAhISCgplZmZpY2llbmN5",
          "GAcgASgFIjMKEFZlY3RvcjNfUHJvdG9jb2wSCQoBeBgBIAEoAhIJCgF5GAIg",
          "ASgCEgkKAXoYAyABKAIiJwoIUm9vbVVzZXISCgoCaWQYASABKAkSDwoHdXNl",
          "cl9pZBgCIAEoCSJVCgxVc2VyUG9zaXRpb24SHAoJcm9vbV91c2VyGAEgASgL",
          "MgkuUm9vbVVzZXISJwoMbmV3X3Bvc2l0aW9uGAIgASgLMhEuVmVjdG9yM19Q",
          "cm90b2NvbCJECgxNYXN0ZXJTd2l0Y2gSCgoCaWQYASABKAkSEQoJbWFzdGVy",
          "X2lkGAIgASgJEhUKDW5ld19tYXN0ZXJfaWQYAyABKAkiNgoFU2NlbmUSHAoJ",
          "cm9vbV91c2VyGAEgASgLMgkuUm9vbVVzZXISDwoHc2NlbmVJZBgCIAEoBSJk",
          "CgREaWZmEhwKBmFjdGlvbhgBIAEoDjIMLkRpZmYuQWN0aW9uEhUKBXRva2Vu",
          "GAIgASgLMgYuVG9rZW4iJwoGQWN0aW9uEgcKA0FERBAAEgoKBkRFTEVURRAB",
          "EggKBE1PVkUQAiK7AQoKRW5lcmd5VXNlchIMCgR0aW1lGAEgASgJEg0KBWxh",
          "YmVsGAIgASgJEgwKBG5hbWUYAyABKAkSEQoJc291cmNlX2lkGAQgASgJEhQK",
          "DHRvdGFsX2RlbWFuZBgFIAEoCRIQCghsaWdodGluZxgGIAEoCRIMCgRodmFj",
          "GAcgASgJEhIKCmFwcGxpYW5jZXMYCCABKAkSCwoDbGFiGAkgASgJEgoKAnB2",
          "GAogASgJEgwKBHVuaXQYCyABKAkitgMKEkVuZXJneURlbWFuZEhvdXJseRIK",
          "CgJpZBgBIAEoCRIMCgRkYXRlGAIgASgJEgwKBHllYXIYAyABKAkSDQoFbW9u",
          "dGgYBCABKAkSCwoDZGF5GAUgASgJEgwKBGhvdXIYBiABKAkSDwoHbWludXRl",
          "cxgHIAEoCRIRCglzb3VyY2VfaWQYCCABKAkSEgoKY2hhbm5lbF9pZBgJIAEo",
          "CRIMCgR1bml0GAogASgJEhQKDHRvdGFsX2RlbWFuZBgLIAEoCRITCgtkZWx0",
          "YV92YWx1ZRgMIAEoCRISCgpzb3VyY2VfdGFnGA0gASgJEhMKC2NoYW5uZWxf",
          "dGFnGA4gASgJEg0KBWxhYmVsGA8gASgJEgwKBG5hbWUYECABKAkSDgoGaGVp",
          "Z2h0GBEgASgJEgwKBGFyZWEYEiABKAkSEgoKd2luZF9zcGVlZBgTIAEoCRIT",
          "Cgt0ZW1wZXJhdHVyZRgUIAEoCRIRCglzb2xhcl9yYWQYFSABKAkSGQoRZWxl",
          "Y3RyaWNpdHlfcHJpY2UYFiABKAkSDgoGc3VwcGx5GBcgASgJEhIKCnJlbmV3",
          "YWJsZXMYGCABKAkiYgoKRW5lcmd5RGF0YRIhCgxlbmVyZ3lfdXNlcnMYASAD",
          "KAsyCy5FbmVyZ3lVc2VyEjEKFGVuZXJneV9kZW1hbmRfaG91cmx5GAIgAygL",
          "MhMuRW5lcmd5RGVtYW5kSG91cmx5ImUKD0dlbmVyYXRlZEVuZXJneRIjCgRk",
          "YXRhGAEgAygLMhUuR2VuZXJhdGVkRW5lcmd5LkRhdGEaLQoERGF0YRIVCgV0",
          "b2tlbhgBIAEoCzIGLlRva2VuEg4KBmVuZXJneRgCIAEoAiLQAQoFUGF0Y2gS",
          "DwoHcm9vbV9pZBgBIAEoCRIQCghzY2VuZV9pZBgCIAEoBRIoCg11c2VyX3Bv",
          "c2l0aW9uGAMgASgLMhEuVmVjdG9yM19Qcm90b2NvbBIRCglpc19tYXN0ZXIY",
          "BCABKAgSFAoFZGlmZnMYBSADKAsyBS5EaWZmEhYKB2hpc3RvcnkYByADKAsy",
          "BS5EaWZmEiAKBmVuZXJneRgIIAEoCzIQLkdlbmVyYXRlZEVuZXJneRIXCgRt",
          "b2RlGAkgASgOMgkuVmlld01vZGUiQwoKTW9kZVN3aXRjaBIcCglyb29tX3Vz",
          "ZXIYASABKAsyCS5Sb29tVXNlchIXCgRtb2RlGAIgASgOMgkuVmlld01vZGUq",
          "KAoIVmlld01vZGUSDAoIT3ZlcnZpZXcQABIOCgpTdHJlZXRWaWV3EAEy4gMK",
          "F1NtYXJ0RW5lcmd5VGFibGVTZXJ2aWNlEiEKCkNyZWF0ZVJvb20SBi5FbXB0",
          "eRoJLlJvb21Vc2VyIgASIQoISm9pblJvb20SCS5Sb29tVXNlchoGLlBhdGNo",
          "IgAwARIfCghTYXZlUm9vbRIJLlJvb21Vc2VyGgYuRW1wdHkiABIcCghBZGRU",
          "b2tlbhIGLlRva2VuGgYuRW1wdHkiABIfCgtSZW1vdmVUb2tlbhIGLlRva2Vu",
          "GgYuRW1wdHkiABIdCglNb3ZlVG9rZW4SBi5Ub2tlbhoGLkVtcHR5IgASIAoJ",
          "Q2xlYXJSb29tEgkuUm9vbVVzZXIaBi5FbXB0eSIAEh8KC0NoYW5nZVNjZW5l",
          "EgYuU2NlbmUaBi5FbXB0eSIAEiQKCU1vdmVVc2VycxINLlVzZXJQb3NpdGlv",
          "bhoGLkVtcHR5IgASIAoJTGVhdmVSb29tEgkuUm9vbVVzZXIaBi5FbXB0eSIA",
          "EicKDENoYW5nZU1hc3RlchINLk1hc3RlclN3aXRjaBoGLkVtcHR5IgASKQoN",
          "R2V0RW5lcmd5RGF0YRIJLlJvb21Vc2VyGgsuRW5lcmd5RGF0YSIAEiMKClN3",
          "aXRjaE1vZGUSCy5Nb2RlU3dpdGNoGgYuRW1wdHkiAEIMWgpwa2cvYXBpL3Yx",
          "YgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ViewMode), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Empty), global::Empty.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Token), global::Token.Parser, new[]{ "RoomUser", "ObjectIndex", "Position", "ObjectId", "Rotation", "Scale", "Efficiency" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Vector3_Protocol), global::Vector3_Protocol.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomUser), global::RoomUser.Parser, new[]{ "Id", "UserId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserPosition), global::UserPosition.Parser, new[]{ "RoomUser", "NewPosition" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MasterSwitch), global::MasterSwitch.Parser, new[]{ "Id", "MasterId", "NewMasterId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Scene), global::Scene.Parser, new[]{ "RoomUser", "SceneId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Diff), global::Diff.Parser, new[]{ "Action", "Token" }, null, new[]{ typeof(global::Diff.Types.Action) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnergyUser), global::EnergyUser.Parser, new[]{ "Time", "Label", "Name", "SourceId", "TotalDemand", "Lighting", "Hvac", "Appliances", "Lab", "Pv", "Unit" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnergyDemandHourly), global::EnergyDemandHourly.Parser, new[]{ "Id", "Date", "Year", "Month", "Day", "Hour", "Minutes", "SourceId", "ChannelId", "Unit", "TotalDemand", "DeltaValue", "SourceTag", "ChannelTag", "Label", "Name", "Height", "Area", "WindSpeed", "Temperature", "SolarRad", "ElectricityPrice", "Supply", "Renewables" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnergyData), global::EnergyData.Parser, new[]{ "EnergyUsers", "EnergyDemandHourly" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GeneratedEnergy), global::GeneratedEnergy.Parser, new[]{ "Data" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GeneratedEnergy.Types.Data), global::GeneratedEnergy.Types.Data.Parser, new[]{ "Token", "Energy" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::Patch), global::Patch.Parser, new[]{ "RoomId", "SceneId", "UserPosition", "IsMaster", "Diffs", "History", "Energy", "Mode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ModeSwitch), global::ModeSwitch.Parser, new[]{ "RoomUser", "Mode" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum ViewMode {
  [pbr::OriginalName("Overview")] Overview = 0,
  [pbr::OriginalName("StreetView")] StreetView = 1,
}

#endregion

#region Messages
public sealed partial class Empty : pb::IMessage<Empty> {
  private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Empty> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Empty() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Empty(Empty other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Empty Clone() {
    return new Empty(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Empty);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Empty other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Empty other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class Token : pb::IMessage<Token> {
  private static readonly pb::MessageParser<Token> _parser = new pb::MessageParser<Token>(() => new Token());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Token> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Token() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Token(Token other) : this() {
    roomUser_ = other.roomUser_ != null ? other.roomUser_.Clone() : null;
    objectIndex_ = other.objectIndex_;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    objectId_ = other.objectId_;
    rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
    scale_ = other.scale_;
    efficiency_ = other.efficiency_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Token Clone() {
    return new Token(this);
  }

  /// <summary>Field number for the "room_user" field.</summary>
  public const int RoomUserFieldNumber = 1;
  private global::RoomUser roomUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomUser RoomUser {
    get { return roomUser_; }
    set {
      roomUser_ = value;
    }
  }

  /// <summary>Field number for the "object_index" field.</summary>
  public const int ObjectIndexFieldNumber = 2;
  private int objectIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ObjectIndex {
    get { return objectIndex_; }
    set {
      objectIndex_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 3;
  private global::Vector3_Protocol position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector3_Protocol Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "object_id" field.</summary>
  public const int ObjectIdFieldNumber = 4;
  private string objectId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ObjectId {
    get { return objectId_; }
    set {
      objectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 5;
  private global::Vector3_Protocol rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector3_Protocol Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "scale" field.</summary>
  public const int ScaleFieldNumber = 6;
  private float scale_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Scale {
    get { return scale_; }
    set {
      scale_ = value;
    }
  }

  /// <summary>Field number for the "efficiency" field.</summary>
  public const int EfficiencyFieldNumber = 7;
  private int efficiency_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Efficiency {
    get { return efficiency_; }
    set {
      efficiency_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Token);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Token other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RoomUser, other.RoomUser)) return false;
    if (ObjectIndex != other.ObjectIndex) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (ObjectId != other.ObjectId) return false;
    if (!object.Equals(Rotation, other.Rotation)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
    if (Efficiency != other.Efficiency) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (roomUser_ != null) hash ^= RoomUser.GetHashCode();
    if (ObjectIndex != 0) hash ^= ObjectIndex.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (ObjectId.Length != 0) hash ^= ObjectId.GetHashCode();
    if (rotation_ != null) hash ^= Rotation.GetHashCode();
    if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
    if (Efficiency != 0) hash ^= Efficiency.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (roomUser_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RoomUser);
    }
    if (ObjectIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ObjectIndex);
    }
    if (position_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Position);
    }
    if (ObjectId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ObjectId);
    }
    if (rotation_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Rotation);
    }
    if (Scale != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Scale);
    }
    if (Efficiency != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Efficiency);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (roomUser_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomUser);
    }
    if (ObjectIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjectIndex);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (ObjectId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectId);
    }
    if (rotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
    }
    if (Scale != 0F) {
      size += 1 + 4;
    }
    if (Efficiency != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Efficiency);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Token other) {
    if (other == null) {
      return;
    }
    if (other.roomUser_ != null) {
      if (roomUser_ == null) {
        RoomUser = new global::RoomUser();
      }
      RoomUser.MergeFrom(other.RoomUser);
    }
    if (other.ObjectIndex != 0) {
      ObjectIndex = other.ObjectIndex;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::Vector3_Protocol();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.ObjectId.Length != 0) {
      ObjectId = other.ObjectId;
    }
    if (other.rotation_ != null) {
      if (rotation_ == null) {
        Rotation = new global::Vector3_Protocol();
      }
      Rotation.MergeFrom(other.Rotation);
    }
    if (other.Scale != 0F) {
      Scale = other.Scale;
    }
    if (other.Efficiency != 0) {
      Efficiency = other.Efficiency;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (roomUser_ == null) {
            RoomUser = new global::RoomUser();
          }
          input.ReadMessage(RoomUser);
          break;
        }
        case 16: {
          ObjectIndex = input.ReadInt32();
          break;
        }
        case 26: {
          if (position_ == null) {
            Position = new global::Vector3_Protocol();
          }
          input.ReadMessage(Position);
          break;
        }
        case 34: {
          ObjectId = input.ReadString();
          break;
        }
        case 42: {
          if (rotation_ == null) {
            Rotation = new global::Vector3_Protocol();
          }
          input.ReadMessage(Rotation);
          break;
        }
        case 53: {
          Scale = input.ReadFloat();
          break;
        }
        case 56: {
          Efficiency = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Vector3_Protocol : pb::IMessage<Vector3_Protocol> {
  private static readonly pb::MessageParser<Vector3_Protocol> _parser = new pb::MessageParser<Vector3_Protocol>(() => new Vector3_Protocol());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Vector3_Protocol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector3_Protocol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector3_Protocol(Vector3_Protocol other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector3_Protocol Clone() {
    return new Vector3_Protocol(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Vector3_Protocol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Vector3_Protocol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Vector3_Protocol other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class RoomUser : pb::IMessage<RoomUser> {
  private static readonly pb::MessageParser<RoomUser> _parser = new pb::MessageParser<RoomUser>(() => new RoomUser());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomUser> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomUser() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomUser(RoomUser other) : this() {
    id_ = other.id_;
    userId_ = other.userId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomUser Clone() {
    return new RoomUser(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 2;
  private string userId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserId {
    get { return userId_; }
    set {
      userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomUser);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomUser other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (UserId != other.UserId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (UserId.Length != 0) hash ^= UserId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (UserId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(UserId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (UserId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomUser other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.UserId.Length != 0) {
      UserId = other.UserId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          UserId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class UserPosition : pb::IMessage<UserPosition> {
  private static readonly pb::MessageParser<UserPosition> _parser = new pb::MessageParser<UserPosition>(() => new UserPosition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserPosition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserPosition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserPosition(UserPosition other) : this() {
    roomUser_ = other.roomUser_ != null ? other.roomUser_.Clone() : null;
    newPosition_ = other.newPosition_ != null ? other.newPosition_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserPosition Clone() {
    return new UserPosition(this);
  }

  /// <summary>Field number for the "room_user" field.</summary>
  public const int RoomUserFieldNumber = 1;
  private global::RoomUser roomUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomUser RoomUser {
    get { return roomUser_; }
    set {
      roomUser_ = value;
    }
  }

  /// <summary>Field number for the "new_position" field.</summary>
  public const int NewPositionFieldNumber = 2;
  private global::Vector3_Protocol newPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector3_Protocol NewPosition {
    get { return newPosition_; }
    set {
      newPosition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserPosition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserPosition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RoomUser, other.RoomUser)) return false;
    if (!object.Equals(NewPosition, other.NewPosition)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (roomUser_ != null) hash ^= RoomUser.GetHashCode();
    if (newPosition_ != null) hash ^= NewPosition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (roomUser_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RoomUser);
    }
    if (newPosition_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(NewPosition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (roomUser_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomUser);
    }
    if (newPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewPosition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserPosition other) {
    if (other == null) {
      return;
    }
    if (other.roomUser_ != null) {
      if (roomUser_ == null) {
        RoomUser = new global::RoomUser();
      }
      RoomUser.MergeFrom(other.RoomUser);
    }
    if (other.newPosition_ != null) {
      if (newPosition_ == null) {
        NewPosition = new global::Vector3_Protocol();
      }
      NewPosition.MergeFrom(other.NewPosition);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (roomUser_ == null) {
            RoomUser = new global::RoomUser();
          }
          input.ReadMessage(RoomUser);
          break;
        }
        case 18: {
          if (newPosition_ == null) {
            NewPosition = new global::Vector3_Protocol();
          }
          input.ReadMessage(NewPosition);
          break;
        }
      }
    }
  }

}

public sealed partial class MasterSwitch : pb::IMessage<MasterSwitch> {
  private static readonly pb::MessageParser<MasterSwitch> _parser = new pb::MessageParser<MasterSwitch>(() => new MasterSwitch());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MasterSwitch> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MasterSwitch() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MasterSwitch(MasterSwitch other) : this() {
    id_ = other.id_;
    masterId_ = other.masterId_;
    newMasterId_ = other.newMasterId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MasterSwitch Clone() {
    return new MasterSwitch(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "master_id" field.</summary>
  public const int MasterIdFieldNumber = 2;
  private string masterId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MasterId {
    get { return masterId_; }
    set {
      masterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "new_master_id" field.</summary>
  public const int NewMasterIdFieldNumber = 3;
  private string newMasterId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NewMasterId {
    get { return newMasterId_; }
    set {
      newMasterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MasterSwitch);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MasterSwitch other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (MasterId != other.MasterId) return false;
    if (NewMasterId != other.NewMasterId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (MasterId.Length != 0) hash ^= MasterId.GetHashCode();
    if (NewMasterId.Length != 0) hash ^= NewMasterId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (MasterId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(MasterId);
    }
    if (NewMasterId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(NewMasterId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (MasterId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MasterId);
    }
    if (NewMasterId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NewMasterId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MasterSwitch other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.MasterId.Length != 0) {
      MasterId = other.MasterId;
    }
    if (other.NewMasterId.Length != 0) {
      NewMasterId = other.NewMasterId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          MasterId = input.ReadString();
          break;
        }
        case 26: {
          NewMasterId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Scene : pb::IMessage<Scene> {
  private static readonly pb::MessageParser<Scene> _parser = new pb::MessageParser<Scene>(() => new Scene());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Scene> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Scene() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Scene(Scene other) : this() {
    roomUser_ = other.roomUser_ != null ? other.roomUser_.Clone() : null;
    sceneId_ = other.sceneId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Scene Clone() {
    return new Scene(this);
  }

  /// <summary>Field number for the "room_user" field.</summary>
  public const int RoomUserFieldNumber = 1;
  private global::RoomUser roomUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomUser RoomUser {
    get { return roomUser_; }
    set {
      roomUser_ = value;
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private int sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Scene);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Scene other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RoomUser, other.RoomUser)) return false;
    if (SceneId != other.SceneId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (roomUser_ != null) hash ^= RoomUser.GetHashCode();
    if (SceneId != 0) hash ^= SceneId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (roomUser_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RoomUser);
    }
    if (SceneId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SceneId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (roomUser_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomUser);
    }
    if (SceneId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Scene other) {
    if (other == null) {
      return;
    }
    if (other.roomUser_ != null) {
      if (roomUser_ == null) {
        RoomUser = new global::RoomUser();
      }
      RoomUser.MergeFrom(other.RoomUser);
    }
    if (other.SceneId != 0) {
      SceneId = other.SceneId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (roomUser_ == null) {
            RoomUser = new global::RoomUser();
          }
          input.ReadMessage(RoomUser);
          break;
        }
        case 16: {
          SceneId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Diff : pb::IMessage<Diff> {
  private static readonly pb::MessageParser<Diff> _parser = new pb::MessageParser<Diff>(() => new Diff());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Diff> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Diff() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Diff(Diff other) : this() {
    action_ = other.action_;
    token_ = other.token_ != null ? other.token_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Diff Clone() {
    return new Diff(this);
  }

  /// <summary>Field number for the "action" field.</summary>
  public const int ActionFieldNumber = 1;
  private global::Diff.Types.Action action_ = global::Diff.Types.Action.Add;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Diff.Types.Action Action {
    get { return action_; }
    set {
      action_ = value;
    }
  }

  /// <summary>Field number for the "token" field.</summary>
  public const int TokenFieldNumber = 2;
  private global::Token token_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Token Token {
    get { return token_; }
    set {
      token_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Diff);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Diff other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Action != other.Action) return false;
    if (!object.Equals(Token, other.Token)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Action != global::Diff.Types.Action.Add) hash ^= Action.GetHashCode();
    if (token_ != null) hash ^= Token.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Action != global::Diff.Types.Action.Add) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Action);
    }
    if (token_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Token);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Action != global::Diff.Types.Action.Add) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
    }
    if (token_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Diff other) {
    if (other == null) {
      return;
    }
    if (other.Action != global::Diff.Types.Action.Add) {
      Action = other.Action;
    }
    if (other.token_ != null) {
      if (token_ == null) {
        Token = new global::Token();
      }
      Token.MergeFrom(other.Token);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Action = (global::Diff.Types.Action) input.ReadEnum();
          break;
        }
        case 18: {
          if (token_ == null) {
            Token = new global::Token();
          }
          input.ReadMessage(Token);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Diff message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Action {
      [pbr::OriginalName("ADD")] Add = 0,
      [pbr::OriginalName("DELETE")] Delete = 1,
      [pbr::OriginalName("MOVE")] Move = 2,
      [pbr::OriginalName("MOVEUSER")] MoveUser = 3
        }

  }
  #endregion

}

public sealed partial class EnergyUser : pb::IMessage<EnergyUser> {
  private static readonly pb::MessageParser<EnergyUser> _parser = new pb::MessageParser<EnergyUser>(() => new EnergyUser());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnergyUser> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnergyUser() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnergyUser(EnergyUser other) : this() {
    time_ = other.time_;
    label_ = other.label_;
    name_ = other.name_;
    sourceId_ = other.sourceId_;
    totalDemand_ = other.totalDemand_;
    lighting_ = other.lighting_;
    hvac_ = other.hvac_;
    appliances_ = other.appliances_;
    lab_ = other.lab_;
    pv_ = other.pv_;
    unit_ = other.unit_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnergyUser Clone() {
    return new EnergyUser(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private string time_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Time {
    get { return time_; }
    set {
      time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "label" field.</summary>
  public const int LabelFieldNumber = 2;
  private string label_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Label {
    get { return label_; }
    set {
      label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "source_id" field.</summary>
  public const int SourceIdFieldNumber = 4;
  private string sourceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SourceId {
    get { return sourceId_; }
    set {
      sourceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "total_demand" field.</summary>
  public const int TotalDemandFieldNumber = 5;
  private string totalDemand_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TotalDemand {
    get { return totalDemand_; }
    set {
      totalDemand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "lighting" field.</summary>
  public const int LightingFieldNumber = 6;
  private string lighting_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Lighting {
    get { return lighting_; }
    set {
      lighting_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hvac" field.</summary>
  public const int HvacFieldNumber = 7;
  private string hvac_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Hvac {
    get { return hvac_; }
    set {
      hvac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "appliances" field.</summary>
  public const int AppliancesFieldNumber = 8;
  private string appliances_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Appliances {
    get { return appliances_; }
    set {
      appliances_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "lab" field.</summary>
  public const int LabFieldNumber = 9;
  private string lab_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Lab {
    get { return lab_; }
    set {
      lab_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pv" field.</summary>
  public const int PvFieldNumber = 10;
  private string pv_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Pv {
    get { return pv_; }
    set {
      pv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "unit" field.</summary>
  public const int UnitFieldNumber = 11;
  private string unit_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Unit {
    get { return unit_; }
    set {
      unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnergyUser);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnergyUser other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if (Label != other.Label) return false;
    if (Name != other.Name) return false;
    if (SourceId != other.SourceId) return false;
    if (TotalDemand != other.TotalDemand) return false;
    if (Lighting != other.Lighting) return false;
    if (Hvac != other.Hvac) return false;
    if (Appliances != other.Appliances) return false;
    if (Lab != other.Lab) return false;
    if (Pv != other.Pv) return false;
    if (Unit != other.Unit) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time.Length != 0) hash ^= Time.GetHashCode();
    if (Label.Length != 0) hash ^= Label.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (SourceId.Length != 0) hash ^= SourceId.GetHashCode();
    if (TotalDemand.Length != 0) hash ^= TotalDemand.GetHashCode();
    if (Lighting.Length != 0) hash ^= Lighting.GetHashCode();
    if (Hvac.Length != 0) hash ^= Hvac.GetHashCode();
    if (Appliances.Length != 0) hash ^= Appliances.GetHashCode();
    if (Lab.Length != 0) hash ^= Lab.GetHashCode();
    if (Pv.Length != 0) hash ^= Pv.GetHashCode();
    if (Unit.Length != 0) hash ^= Unit.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Time.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Time);
    }
    if (Label.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Label);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (SourceId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(SourceId);
    }
    if (TotalDemand.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(TotalDemand);
    }
    if (Lighting.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Lighting);
    }
    if (Hvac.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Hvac);
    }
    if (Appliances.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Appliances);
    }
    if (Lab.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Lab);
    }
    if (Pv.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Pv);
    }
    if (Unit.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(Unit);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
    }
    if (Label.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (SourceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceId);
    }
    if (TotalDemand.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalDemand);
    }
    if (Lighting.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Lighting);
    }
    if (Hvac.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Hvac);
    }
    if (Appliances.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Appliances);
    }
    if (Lab.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Lab);
    }
    if (Pv.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Pv);
    }
    if (Unit.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnergyUser other) {
    if (other == null) {
      return;
    }
    if (other.Time.Length != 0) {
      Time = other.Time;
    }
    if (other.Label.Length != 0) {
      Label = other.Label;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.SourceId.Length != 0) {
      SourceId = other.SourceId;
    }
    if (other.TotalDemand.Length != 0) {
      TotalDemand = other.TotalDemand;
    }
    if (other.Lighting.Length != 0) {
      Lighting = other.Lighting;
    }
    if (other.Hvac.Length != 0) {
      Hvac = other.Hvac;
    }
    if (other.Appliances.Length != 0) {
      Appliances = other.Appliances;
    }
    if (other.Lab.Length != 0) {
      Lab = other.Lab;
    }
    if (other.Pv.Length != 0) {
      Pv = other.Pv;
    }
    if (other.Unit.Length != 0) {
      Unit = other.Unit;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Time = input.ReadString();
          break;
        }
        case 18: {
          Label = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          SourceId = input.ReadString();
          break;
        }
        case 42: {
          TotalDemand = input.ReadString();
          break;
        }
        case 50: {
          Lighting = input.ReadString();
          break;
        }
        case 58: {
          Hvac = input.ReadString();
          break;
        }
        case 66: {
          Appliances = input.ReadString();
          break;
        }
        case 74: {
          Lab = input.ReadString();
          break;
        }
        case 82: {
          Pv = input.ReadString();
          break;
        }
        case 90: {
          Unit = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class EnergyDemandHourly : pb::IMessage<EnergyDemandHourly> {
  private static readonly pb::MessageParser<EnergyDemandHourly> _parser = new pb::MessageParser<EnergyDemandHourly>(() => new EnergyDemandHourly());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnergyDemandHourly> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnergyDemandHourly() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnergyDemandHourly(EnergyDemandHourly other) : this() {
    id_ = other.id_;
    date_ = other.date_;
    year_ = other.year_;
    month_ = other.month_;
    day_ = other.day_;
    hour_ = other.hour_;
    minutes_ = other.minutes_;
    sourceId_ = other.sourceId_;
    channelId_ = other.channelId_;
    unit_ = other.unit_;
    totalDemand_ = other.totalDemand_;
    deltaValue_ = other.deltaValue_;
    sourceTag_ = other.sourceTag_;
    channelTag_ = other.channelTag_;
    label_ = other.label_;
    name_ = other.name_;
    height_ = other.height_;
    area_ = other.area_;
    windSpeed_ = other.windSpeed_;
    temperature_ = other.temperature_;
    solarRad_ = other.solarRad_;
    electricityPrice_ = other.electricityPrice_;
    supply_ = other.supply_;
    renewables_ = other.renewables_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnergyDemandHourly Clone() {
    return new EnergyDemandHourly(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "date" field.</summary>
  public const int DateFieldNumber = 2;
  private string date_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Date {
    get { return date_; }
    set {
      date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "year" field.</summary>
  public const int YearFieldNumber = 3;
  private string year_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Year {
    get { return year_; }
    set {
      year_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "month" field.</summary>
  public const int MonthFieldNumber = 4;
  private string month_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Month {
    get { return month_; }
    set {
      month_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "day" field.</summary>
  public const int DayFieldNumber = 5;
  private string day_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Day {
    get { return day_; }
    set {
      day_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hour" field.</summary>
  public const int HourFieldNumber = 6;
  private string hour_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Hour {
    get { return hour_; }
    set {
      hour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "minutes" field.</summary>
  public const int MinutesFieldNumber = 7;
  private string minutes_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Minutes {
    get { return minutes_; }
    set {
      minutes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "source_id" field.</summary>
  public const int SourceIdFieldNumber = 8;
  private string sourceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SourceId {
    get { return sourceId_; }
    set {
      sourceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "channel_id" field.</summary>
  public const int ChannelIdFieldNumber = 9;
  private string channelId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ChannelId {
    get { return channelId_; }
    set {
      channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "unit" field.</summary>
  public const int UnitFieldNumber = 10;
  private string unit_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Unit {
    get { return unit_; }
    set {
      unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "total_demand" field.</summary>
  public const int TotalDemandFieldNumber = 11;
  private string totalDemand_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TotalDemand {
    get { return totalDemand_; }
    set {
      totalDemand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "delta_value" field.</summary>
  public const int DeltaValueFieldNumber = 12;
  private string deltaValue_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeltaValue {
    get { return deltaValue_; }
    set {
      deltaValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "source_tag" field.</summary>
  public const int SourceTagFieldNumber = 13;
  private string sourceTag_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SourceTag {
    get { return sourceTag_; }
    set {
      sourceTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "channel_tag" field.</summary>
  public const int ChannelTagFieldNumber = 14;
  private string channelTag_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ChannelTag {
    get { return channelTag_; }
    set {
      channelTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "label" field.</summary>
  public const int LabelFieldNumber = 15;
  private string label_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Label {
    get { return label_; }
    set {
      label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 16;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "height" field.</summary>
  public const int HeightFieldNumber = 17;
  private string height_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Height {
    get { return height_; }
    set {
      height_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "area" field.</summary>
  public const int AreaFieldNumber = 18;
  private string area_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Area {
    get { return area_; }
    set {
      area_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "wind_speed" field.</summary>
  public const int WindSpeedFieldNumber = 19;
  private string windSpeed_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WindSpeed {
    get { return windSpeed_; }
    set {
      windSpeed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "temperature" field.</summary>
  public const int TemperatureFieldNumber = 20;
  private string temperature_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Temperature {
    get { return temperature_; }
    set {
      temperature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "solar_rad" field.</summary>
  public const int SolarRadFieldNumber = 21;
  private string solarRad_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SolarRad {
    get { return solarRad_; }
    set {
      solarRad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "electricity_price" field.</summary>
  public const int ElectricityPriceFieldNumber = 22;
  private string electricityPrice_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ElectricityPrice {
    get { return electricityPrice_; }
    set {
      electricityPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "supply" field.</summary>
  public const int SupplyFieldNumber = 23;
  private string supply_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Supply {
    get { return supply_; }
    set {
      supply_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "renewables" field.</summary>
  public const int RenewablesFieldNumber = 24;
  private string renewables_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Renewables {
    get { return renewables_; }
    set {
      renewables_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnergyDemandHourly);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnergyDemandHourly other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Date != other.Date) return false;
    if (Year != other.Year) return false;
    if (Month != other.Month) return false;
    if (Day != other.Day) return false;
    if (Hour != other.Hour) return false;
    if (Minutes != other.Minutes) return false;
    if (SourceId != other.SourceId) return false;
    if (ChannelId != other.ChannelId) return false;
    if (Unit != other.Unit) return false;
    if (TotalDemand != other.TotalDemand) return false;
    if (DeltaValue != other.DeltaValue) return false;
    if (SourceTag != other.SourceTag) return false;
    if (ChannelTag != other.ChannelTag) return false;
    if (Label != other.Label) return false;
    if (Name != other.Name) return false;
    if (Height != other.Height) return false;
    if (Area != other.Area) return false;
    if (WindSpeed != other.WindSpeed) return false;
    if (Temperature != other.Temperature) return false;
    if (SolarRad != other.SolarRad) return false;
    if (ElectricityPrice != other.ElectricityPrice) return false;
    if (Supply != other.Supply) return false;
    if (Renewables != other.Renewables) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Date.Length != 0) hash ^= Date.GetHashCode();
    if (Year.Length != 0) hash ^= Year.GetHashCode();
    if (Month.Length != 0) hash ^= Month.GetHashCode();
    if (Day.Length != 0) hash ^= Day.GetHashCode();
    if (Hour.Length != 0) hash ^= Hour.GetHashCode();
    if (Minutes.Length != 0) hash ^= Minutes.GetHashCode();
    if (SourceId.Length != 0) hash ^= SourceId.GetHashCode();
    if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
    if (Unit.Length != 0) hash ^= Unit.GetHashCode();
    if (TotalDemand.Length != 0) hash ^= TotalDemand.GetHashCode();
    if (DeltaValue.Length != 0) hash ^= DeltaValue.GetHashCode();
    if (SourceTag.Length != 0) hash ^= SourceTag.GetHashCode();
    if (ChannelTag.Length != 0) hash ^= ChannelTag.GetHashCode();
    if (Label.Length != 0) hash ^= Label.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Height.Length != 0) hash ^= Height.GetHashCode();
    if (Area.Length != 0) hash ^= Area.GetHashCode();
    if (WindSpeed.Length != 0) hash ^= WindSpeed.GetHashCode();
    if (Temperature.Length != 0) hash ^= Temperature.GetHashCode();
    if (SolarRad.Length != 0) hash ^= SolarRad.GetHashCode();
    if (ElectricityPrice.Length != 0) hash ^= ElectricityPrice.GetHashCode();
    if (Supply.Length != 0) hash ^= Supply.GetHashCode();
    if (Renewables.Length != 0) hash ^= Renewables.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Date.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Date);
    }
    if (Year.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Year);
    }
    if (Month.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Month);
    }
    if (Day.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Day);
    }
    if (Hour.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Hour);
    }
    if (Minutes.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Minutes);
    }
    if (SourceId.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(SourceId);
    }
    if (ChannelId.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(ChannelId);
    }
    if (Unit.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Unit);
    }
    if (TotalDemand.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(TotalDemand);
    }
    if (DeltaValue.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(DeltaValue);
    }
    if (SourceTag.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(SourceTag);
    }
    if (ChannelTag.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(ChannelTag);
    }
    if (Label.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(Label);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(130, 1);
      output.WriteString(Name);
    }
    if (Height.Length != 0) {
      output.WriteRawTag(138, 1);
      output.WriteString(Height);
    }
    if (Area.Length != 0) {
      output.WriteRawTag(146, 1);
      output.WriteString(Area);
    }
    if (WindSpeed.Length != 0) {
      output.WriteRawTag(154, 1);
      output.WriteString(WindSpeed);
    }
    if (Temperature.Length != 0) {
      output.WriteRawTag(162, 1);
      output.WriteString(Temperature);
    }
    if (SolarRad.Length != 0) {
      output.WriteRawTag(170, 1);
      output.WriteString(SolarRad);
    }
    if (ElectricityPrice.Length != 0) {
      output.WriteRawTag(178, 1);
      output.WriteString(ElectricityPrice);
    }
    if (Supply.Length != 0) {
      output.WriteRawTag(186, 1);
      output.WriteString(Supply);
    }
    if (Renewables.Length != 0) {
      output.WriteRawTag(194, 1);
      output.WriteString(Renewables);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Date.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Date);
    }
    if (Year.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Year);
    }
    if (Month.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Month);
    }
    if (Day.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Day);
    }
    if (Hour.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Hour);
    }
    if (Minutes.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Minutes);
    }
    if (SourceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceId);
    }
    if (ChannelId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
    }
    if (Unit.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
    }
    if (TotalDemand.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalDemand);
    }
    if (DeltaValue.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeltaValue);
    }
    if (SourceTag.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceTag);
    }
    if (ChannelTag.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelTag);
    }
    if (Label.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
    }
    if (Name.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Height.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Height);
    }
    if (Area.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Area);
    }
    if (WindSpeed.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(WindSpeed);
    }
    if (Temperature.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Temperature);
    }
    if (SolarRad.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(SolarRad);
    }
    if (ElectricityPrice.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ElectricityPrice);
    }
    if (Supply.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Supply);
    }
    if (Renewables.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Renewables);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnergyDemandHourly other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Date.Length != 0) {
      Date = other.Date;
    }
    if (other.Year.Length != 0) {
      Year = other.Year;
    }
    if (other.Month.Length != 0) {
      Month = other.Month;
    }
    if (other.Day.Length != 0) {
      Day = other.Day;
    }
    if (other.Hour.Length != 0) {
      Hour = other.Hour;
    }
    if (other.Minutes.Length != 0) {
      Minutes = other.Minutes;
    }
    if (other.SourceId.Length != 0) {
      SourceId = other.SourceId;
    }
    if (other.ChannelId.Length != 0) {
      ChannelId = other.ChannelId;
    }
    if (other.Unit.Length != 0) {
      Unit = other.Unit;
    }
    if (other.TotalDemand.Length != 0) {
      TotalDemand = other.TotalDemand;
    }
    if (other.DeltaValue.Length != 0) {
      DeltaValue = other.DeltaValue;
    }
    if (other.SourceTag.Length != 0) {
      SourceTag = other.SourceTag;
    }
    if (other.ChannelTag.Length != 0) {
      ChannelTag = other.ChannelTag;
    }
    if (other.Label.Length != 0) {
      Label = other.Label;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Height.Length != 0) {
      Height = other.Height;
    }
    if (other.Area.Length != 0) {
      Area = other.Area;
    }
    if (other.WindSpeed.Length != 0) {
      WindSpeed = other.WindSpeed;
    }
    if (other.Temperature.Length != 0) {
      Temperature = other.Temperature;
    }
    if (other.SolarRad.Length != 0) {
      SolarRad = other.SolarRad;
    }
    if (other.ElectricityPrice.Length != 0) {
      ElectricityPrice = other.ElectricityPrice;
    }
    if (other.Supply.Length != 0) {
      Supply = other.Supply;
    }
    if (other.Renewables.Length != 0) {
      Renewables = other.Renewables;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Date = input.ReadString();
          break;
        }
        case 26: {
          Year = input.ReadString();
          break;
        }
        case 34: {
          Month = input.ReadString();
          break;
        }
        case 42: {
          Day = input.ReadString();
          break;
        }
        case 50: {
          Hour = input.ReadString();
          break;
        }
        case 58: {
          Minutes = input.ReadString();
          break;
        }
        case 66: {
          SourceId = input.ReadString();
          break;
        }
        case 74: {
          ChannelId = input.ReadString();
          break;
        }
        case 82: {
          Unit = input.ReadString();
          break;
        }
        case 90: {
          TotalDemand = input.ReadString();
          break;
        }
        case 98: {
          DeltaValue = input.ReadString();
          break;
        }
        case 106: {
          SourceTag = input.ReadString();
          break;
        }
        case 114: {
          ChannelTag = input.ReadString();
          break;
        }
        case 122: {
          Label = input.ReadString();
          break;
        }
        case 130: {
          Name = input.ReadString();
          break;
        }
        case 138: {
          Height = input.ReadString();
          break;
        }
        case 146: {
          Area = input.ReadString();
          break;
        }
        case 154: {
          WindSpeed = input.ReadString();
          break;
        }
        case 162: {
          Temperature = input.ReadString();
          break;
        }
        case 170: {
          SolarRad = input.ReadString();
          break;
        }
        case 178: {
          ElectricityPrice = input.ReadString();
          break;
        }
        case 186: {
          Supply = input.ReadString();
          break;
        }
        case 194: {
          Renewables = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class EnergyData : pb::IMessage<EnergyData> {
  private static readonly pb::MessageParser<EnergyData> _parser = new pb::MessageParser<EnergyData>(() => new EnergyData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnergyData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnergyData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnergyData(EnergyData other) : this() {
    energyUsers_ = other.energyUsers_.Clone();
    energyDemandHourly_ = other.energyDemandHourly_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnergyData Clone() {
    return new EnergyData(this);
  }

  /// <summary>Field number for the "energy_users" field.</summary>
  public const int EnergyUsersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EnergyUser> _repeated_energyUsers_codec
      = pb::FieldCodec.ForMessage(10, global::EnergyUser.Parser);
  private readonly pbc::RepeatedField<global::EnergyUser> energyUsers_ = new pbc::RepeatedField<global::EnergyUser>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EnergyUser> EnergyUsers {
    get { return energyUsers_; }
  }

  /// <summary>Field number for the "energy_demand_hourly" field.</summary>
  public const int EnergyDemandHourlyFieldNumber = 2;
  private static readonly pb::FieldCodec<global::EnergyDemandHourly> _repeated_energyDemandHourly_codec
      = pb::FieldCodec.ForMessage(18, global::EnergyDemandHourly.Parser);
  private readonly pbc::RepeatedField<global::EnergyDemandHourly> energyDemandHourly_ = new pbc::RepeatedField<global::EnergyDemandHourly>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EnergyDemandHourly> EnergyDemandHourly {
    get { return energyDemandHourly_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnergyData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnergyData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!energyUsers_.Equals(other.energyUsers_)) return false;
    if(!energyDemandHourly_.Equals(other.energyDemandHourly_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= energyUsers_.GetHashCode();
    hash ^= energyDemandHourly_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    energyUsers_.WriteTo(output, _repeated_energyUsers_codec);
    energyDemandHourly_.WriteTo(output, _repeated_energyDemandHourly_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += energyUsers_.CalculateSize(_repeated_energyUsers_codec);
    size += energyDemandHourly_.CalculateSize(_repeated_energyDemandHourly_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnergyData other) {
    if (other == null) {
      return;
    }
    energyUsers_.Add(other.energyUsers_);
    energyDemandHourly_.Add(other.energyDemandHourly_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          energyUsers_.AddEntriesFrom(input, _repeated_energyUsers_codec);
          break;
        }
        case 18: {
          energyDemandHourly_.AddEntriesFrom(input, _repeated_energyDemandHourly_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GeneratedEnergy : pb::IMessage<GeneratedEnergy> {
  private static readonly pb::MessageParser<GeneratedEnergy> _parser = new pb::MessageParser<GeneratedEnergy>(() => new GeneratedEnergy());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GeneratedEnergy> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GeneratedEnergy() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GeneratedEnergy(GeneratedEnergy other) : this() {
    data_ = other.data_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GeneratedEnergy Clone() {
    return new GeneratedEnergy(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private static readonly pb::FieldCodec<global::GeneratedEnergy.Types.Data> _repeated_data_codec
      = pb::FieldCodec.ForMessage(10, global::GeneratedEnergy.Types.Data.Parser);
  private readonly pbc::RepeatedField<global::GeneratedEnergy.Types.Data> data_ = new pbc::RepeatedField<global::GeneratedEnergy.Types.Data>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GeneratedEnergy.Types.Data> Data {
    get { return data_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GeneratedEnergy);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GeneratedEnergy other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!data_.Equals(other.data_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= data_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    data_.WriteTo(output, _repeated_data_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += data_.CalculateSize(_repeated_data_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GeneratedEnergy other) {
    if (other == null) {
      return;
    }
    data_.Add(other.data_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          data_.AddEntriesFrom(input, _repeated_data_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the GeneratedEnergy message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class Data : pb::IMessage<Data> {
      private static readonly pb::MessageParser<Data> _parser = new pb::MessageParser<Data>(() => new Data());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Data> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::GeneratedEnergy.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Data() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Data(Data other) : this() {
        token_ = other.token_ != null ? other.token_.Clone() : null;
        energy_ = other.energy_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Data Clone() {
        return new Data(this);
      }

      /// <summary>Field number for the "token" field.</summary>
      public const int TokenFieldNumber = 1;
      private global::Token token_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::Token Token {
        get { return token_; }
        set {
          token_ = value;
        }
      }

      /// <summary>Field number for the "energy" field.</summary>
      public const int EnergyFieldNumber = 2;
      private float energy_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Energy {
        get { return energy_; }
        set {
          energy_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Data);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Data other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!object.Equals(Token, other.Token)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Energy, other.Energy)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (token_ != null) hash ^= Token.GetHashCode();
        if (Energy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Energy);
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (token_ != null) {
          output.WriteRawTag(10);
          output.WriteMessage(Token);
        }
        if (Energy != 0F) {
          output.WriteRawTag(21);
          output.WriteFloat(Energy);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (token_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
        }
        if (Energy != 0F) {
          size += 1 + 4;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Data other) {
        if (other == null) {
          return;
        }
        if (other.token_ != null) {
          if (token_ == null) {
            Token = new global::Token();
          }
          Token.MergeFrom(other.Token);
        }
        if (other.Energy != 0F) {
          Energy = other.Energy;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              if (token_ == null) {
                Token = new global::Token();
              }
              input.ReadMessage(Token);
              break;
            }
            case 21: {
              Energy = input.ReadFloat();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class Patch : pb::IMessage<Patch> {
  private static readonly pb::MessageParser<Patch> _parser = new pb::MessageParser<Patch>(() => new Patch());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Patch> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Patch() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Patch(Patch other) : this() {
    roomId_ = other.roomId_;
    sceneId_ = other.sceneId_;
    userPosition_ = other.userPosition_ != null ? other.userPosition_.Clone() : null;
    isMaster_ = other.isMaster_;
    diffs_ = other.diffs_.Clone();
    history_ = other.history_.Clone();
    energy_ = other.energy_ != null ? other.energy_.Clone() : null;
    mode_ = other.mode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Patch Clone() {
    return new Patch(this);
  }

  /// <summary>Field number for the "room_id" field.</summary>
  public const int RoomIdFieldNumber = 1;
  private string roomId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomId {
    get { return roomId_; }
    set {
      roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "scene_id" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private int sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "user_position" field.</summary>
  public const int UserPositionFieldNumber = 3;
  private global::Vector3_Protocol userPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector3_Protocol UserPosition {
    get { return userPosition_; }
    set {
      userPosition_ = value;
    }
  }

  /// <summary>Field number for the "is_master" field.</summary>
  public const int IsMasterFieldNumber = 4;
  private bool isMaster_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsMaster {
    get { return isMaster_; }
    set {
      isMaster_ = value;
    }
  }

  /// <summary>Field number for the "diffs" field.</summary>
  public const int DiffsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::Diff> _repeated_diffs_codec
      = pb::FieldCodec.ForMessage(42, global::Diff.Parser);
  private readonly pbc::RepeatedField<global::Diff> diffs_ = new pbc::RepeatedField<global::Diff>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Diff> Diffs {
    get { return diffs_; }
  }

  /// <summary>Field number for the "history" field.</summary>
  public const int HistoryFieldNumber = 7;
  private static readonly pb::FieldCodec<global::Diff> _repeated_history_codec
      = pb::FieldCodec.ForMessage(58, global::Diff.Parser);
  private readonly pbc::RepeatedField<global::Diff> history_ = new pbc::RepeatedField<global::Diff>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Diff> History {
    get { return history_; }
  }

  /// <summary>Field number for the "energy" field.</summary>
  public const int EnergyFieldNumber = 8;
  private global::GeneratedEnergy energy_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GeneratedEnergy Energy {
    get { return energy_; }
    set {
      energy_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 9;
  private global::ViewMode mode_ = global::ViewMode.Overview;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ViewMode Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Patch);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Patch other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomId != other.RoomId) return false;
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(UserPosition, other.UserPosition)) return false;
    if (IsMaster != other.IsMaster) return false;
    if(!diffs_.Equals(other.diffs_)) return false;
    if(!history_.Equals(other.history_)) return false;
    if (!object.Equals(Energy, other.Energy)) return false;
    if (Mode != other.Mode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
    if (SceneId != 0) hash ^= SceneId.GetHashCode();
    if (userPosition_ != null) hash ^= UserPosition.GetHashCode();
    if (IsMaster != false) hash ^= IsMaster.GetHashCode();
    hash ^= diffs_.GetHashCode();
    hash ^= history_.GetHashCode();
    if (energy_ != null) hash ^= Energy.GetHashCode();
    if (Mode != global::ViewMode.Overview) hash ^= Mode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(RoomId);
    }
    if (SceneId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SceneId);
    }
    if (userPosition_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(UserPosition);
    }
    if (IsMaster != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsMaster);
    }
    diffs_.WriteTo(output, _repeated_diffs_codec);
    history_.WriteTo(output, _repeated_history_codec);
    if (energy_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Energy);
    }
    if (Mode != global::ViewMode.Overview) {
      output.WriteRawTag(72);
      output.WriteEnum((int) Mode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
    }
    if (SceneId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
    }
    if (userPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPosition);
    }
    if (IsMaster != false) {
      size += 1 + 1;
    }
    size += diffs_.CalculateSize(_repeated_diffs_codec);
    size += history_.CalculateSize(_repeated_history_codec);
    if (energy_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Energy);
    }
    if (Mode != global::ViewMode.Overview) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Patch other) {
    if (other == null) {
      return;
    }
    if (other.RoomId.Length != 0) {
      RoomId = other.RoomId;
    }
    if (other.SceneId != 0) {
      SceneId = other.SceneId;
    }
    if (other.userPosition_ != null) {
      if (userPosition_ == null) {
        UserPosition = new global::Vector3_Protocol();
      }
      UserPosition.MergeFrom(other.UserPosition);
    }
    if (other.IsMaster != false) {
      IsMaster = other.IsMaster;
    }
    diffs_.Add(other.diffs_);
    history_.Add(other.history_);
    if (other.energy_ != null) {
      if (energy_ == null) {
        Energy = new global::GeneratedEnergy();
      }
      Energy.MergeFrom(other.Energy);
    }
    if (other.Mode != global::ViewMode.Overview) {
      Mode = other.Mode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RoomId = input.ReadString();
          break;
        }
        case 16: {
          SceneId = input.ReadInt32();
          break;
        }
        case 26: {
          if (userPosition_ == null) {
            UserPosition = new global::Vector3_Protocol();
          }
          input.ReadMessage(UserPosition);
          break;
        }
        case 32: {
          IsMaster = input.ReadBool();
          break;
        }
        case 42: {
          diffs_.AddEntriesFrom(input, _repeated_diffs_codec);
          break;
        }
        case 58: {
          history_.AddEntriesFrom(input, _repeated_history_codec);
          break;
        }
        case 66: {
          if (energy_ == null) {
            Energy = new global::GeneratedEnergy();
          }
          input.ReadMessage(Energy);
          break;
        }
        case 72: {
          Mode = (global::ViewMode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class ModeSwitch : pb::IMessage<ModeSwitch> {
  private static readonly pb::MessageParser<ModeSwitch> _parser = new pb::MessageParser<ModeSwitch>(() => new ModeSwitch());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ModeSwitch> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModeSwitch() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModeSwitch(ModeSwitch other) : this() {
    roomUser_ = other.roomUser_ != null ? other.roomUser_.Clone() : null;
    mode_ = other.mode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ModeSwitch Clone() {
    return new ModeSwitch(this);
  }

  /// <summary>Field number for the "room_user" field.</summary>
  public const int RoomUserFieldNumber = 1;
  private global::RoomUser roomUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomUser RoomUser {
    get { return roomUser_; }
    set {
      roomUser_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 2;
  private global::ViewMode mode_ = global::ViewMode.Overview;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ViewMode Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ModeSwitch);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ModeSwitch other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RoomUser, other.RoomUser)) return false;
    if (Mode != other.Mode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (roomUser_ != null) hash ^= RoomUser.GetHashCode();
    if (Mode != global::ViewMode.Overview) hash ^= Mode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (roomUser_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RoomUser);
    }
    if (Mode != global::ViewMode.Overview) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Mode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (roomUser_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomUser);
    }
    if (Mode != global::ViewMode.Overview) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ModeSwitch other) {
    if (other == null) {
      return;
    }
    if (other.roomUser_ != null) {
      if (roomUser_ == null) {
        RoomUser = new global::RoomUser();
      }
      RoomUser.MergeFrom(other.RoomUser);
    }
    if (other.Mode != global::ViewMode.Overview) {
      Mode = other.Mode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (roomUser_ == null) {
            RoomUser = new global::RoomUser();
          }
          input.ReadMessage(RoomUser);
          break;
        }
        case 16: {
          Mode = (global::ViewMode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
