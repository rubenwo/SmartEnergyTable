// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: smartenergytable-service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class SmartEnergyTableService
{
  static readonly string __ServiceName = "SmartEnergyTableService";

  static readonly grpc::Marshaller<global::Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Empty.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::RoomUser> __Marshaller_RoomUser = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RoomUser.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Patch> __Marshaller_Patch = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Patch.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Token> __Marshaller_Token = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Token.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Scene> __Marshaller_Scene = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Scene.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::UserPosition> __Marshaller_UserPosition = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::UserPosition.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::MasterSwitch> __Marshaller_MasterSwitch = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MasterSwitch.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::EnergyData> __Marshaller_EnergyData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EnergyData.Parser.ParseFrom);

  static readonly grpc::Method<global::Empty, global::RoomUser> __Method_CreateRoom = new grpc::Method<global::Empty, global::RoomUser>(
      grpc::MethodType.Unary,
      __ServiceName,
      "CreateRoom",
      __Marshaller_Empty,
      __Marshaller_RoomUser);

  static readonly grpc::Method<global::RoomUser, global::Patch> __Method_JoinRoom = new grpc::Method<global::RoomUser, global::Patch>(
      grpc::MethodType.ServerStreaming,
      __ServiceName,
      "JoinRoom",
      __Marshaller_RoomUser,
      __Marshaller_Patch);

  static readonly grpc::Method<global::RoomUser, global::Empty> __Method_SaveRoom = new grpc::Method<global::RoomUser, global::Empty>(
      grpc::MethodType.Unary,
      __ServiceName,
      "SaveRoom",
      __Marshaller_RoomUser,
      __Marshaller_Empty);

  static readonly grpc::Method<global::Token, global::Empty> __Method_AddToken = new grpc::Method<global::Token, global::Empty>(
      grpc::MethodType.Unary,
      __ServiceName,
      "AddToken",
      __Marshaller_Token,
      __Marshaller_Empty);

  static readonly grpc::Method<global::Token, global::Empty> __Method_RemoveToken = new grpc::Method<global::Token, global::Empty>(
      grpc::MethodType.Unary,
      __ServiceName,
      "RemoveToken",
      __Marshaller_Token,
      __Marshaller_Empty);

  static readonly grpc::Method<global::Token, global::Empty> __Method_MoveToken = new grpc::Method<global::Token, global::Empty>(
      grpc::MethodType.Unary,
      __ServiceName,
      "MoveToken",
      __Marshaller_Token,
      __Marshaller_Empty);

  static readonly grpc::Method<global::RoomUser, global::Empty> __Method_ClearRoom = new grpc::Method<global::RoomUser, global::Empty>(
      grpc::MethodType.Unary,
      __ServiceName,
      "ClearRoom",
      __Marshaller_RoomUser,
      __Marshaller_Empty);

  static readonly grpc::Method<global::Scene, global::Empty> __Method_ChangeScene = new grpc::Method<global::Scene, global::Empty>(
      grpc::MethodType.Unary,
      __ServiceName,
      "ChangeScene",
      __Marshaller_Scene,
      __Marshaller_Empty);

  static readonly grpc::Method<global::UserPosition, global::Empty> __Method_MoveUsers = new grpc::Method<global::UserPosition, global::Empty>(
      grpc::MethodType.Unary,
      __ServiceName,
      "MoveUsers",
      __Marshaller_UserPosition,
      __Marshaller_Empty);

  static readonly grpc::Method<global::RoomUser, global::Empty> __Method_LeaveRoom = new grpc::Method<global::RoomUser, global::Empty>(
      grpc::MethodType.Unary,
      __ServiceName,
      "LeaveRoom",
      __Marshaller_RoomUser,
      __Marshaller_Empty);

  static readonly grpc::Method<global::MasterSwitch, global::Empty> __Method_ChangeMaster = new grpc::Method<global::MasterSwitch, global::Empty>(
      grpc::MethodType.Unary,
      __ServiceName,
      "ChangeMaster",
      __Marshaller_MasterSwitch,
      __Marshaller_Empty);

  static readonly grpc::Method<global::RoomUser, global::EnergyData> __Method_GetEnergyData = new grpc::Method<global::RoomUser, global::EnergyData>(
      grpc::MethodType.Unary,
      __ServiceName,
      "GetEnergyData",
      __Marshaller_RoomUser,
      __Marshaller_EnergyData);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::SmartenergytableServiceReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of SmartEnergyTableService</summary>
  [grpc::BindServiceMethod(typeof(SmartEnergyTableService), "BindService")]
  public abstract partial class SmartEnergyTableServiceBase
  {
    public virtual global::System.Threading.Tasks.Task<global::RoomUser> CreateRoom(global::Empty request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task JoinRoom(global::RoomUser request, grpc::IServerStreamWriter<global::Patch> responseStream, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Empty> SaveRoom(global::RoomUser request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Empty> AddToken(global::Token request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Empty> RemoveToken(global::Token request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Empty> MoveToken(global::Token request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Empty> ClearRoom(global::RoomUser request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Empty> ChangeScene(global::Scene request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Empty> MoveUsers(global::UserPosition request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Empty> LeaveRoom(global::RoomUser request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Empty> ChangeMaster(global::MasterSwitch request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::EnergyData> GetEnergyData(global::RoomUser request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for SmartEnergyTableService</summary>
  public partial class SmartEnergyTableServiceClient : grpc::ClientBase<SmartEnergyTableServiceClient>
  {
    /// <summary>Creates a new client for SmartEnergyTableService</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public SmartEnergyTableServiceClient(grpc::ChannelBase channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for SmartEnergyTableService that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public SmartEnergyTableServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected SmartEnergyTableServiceClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected SmartEnergyTableServiceClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual global::RoomUser CreateRoom(global::Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return CreateRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::RoomUser CreateRoom(global::Empty request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_CreateRoom, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::RoomUser> CreateRoomAsync(global::Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return CreateRoomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::RoomUser> CreateRoomAsync(global::Empty request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_CreateRoom, null, options, request);
    }
    public virtual grpc::AsyncServerStreamingCall<global::Patch> JoinRoom(global::RoomUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return JoinRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncServerStreamingCall<global::Patch> JoinRoom(global::RoomUser request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncServerStreamingCall(__Method_JoinRoom, null, options, request);
    }
    public virtual global::Empty SaveRoom(global::RoomUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SaveRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Empty SaveRoom(global::RoomUser request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_SaveRoom, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> SaveRoomAsync(global::RoomUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SaveRoomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> SaveRoomAsync(global::RoomUser request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_SaveRoom, null, options, request);
    }
    public virtual global::Empty AddToken(global::Token request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return AddToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Empty AddToken(global::Token request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_AddToken, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> AddTokenAsync(global::Token request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return AddTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> AddTokenAsync(global::Token request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_AddToken, null, options, request);
    }
    public virtual global::Empty RemoveToken(global::Token request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RemoveToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Empty RemoveToken(global::Token request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_RemoveToken, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> RemoveTokenAsync(global::Token request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return RemoveTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> RemoveTokenAsync(global::Token request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_RemoveToken, null, options, request);
    }
    public virtual global::Empty MoveToken(global::Token request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return MoveToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Empty MoveToken(global::Token request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_MoveToken, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> MoveTokenAsync(global::Token request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return MoveTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> MoveTokenAsync(global::Token request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_MoveToken, null, options, request);
    }
    public virtual global::Empty ClearRoom(global::RoomUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ClearRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Empty ClearRoom(global::RoomUser request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_ClearRoom, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> ClearRoomAsync(global::RoomUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ClearRoomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> ClearRoomAsync(global::RoomUser request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_ClearRoom, null, options, request);
    }
    public virtual global::Empty ChangeScene(global::Scene request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ChangeScene(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Empty ChangeScene(global::Scene request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_ChangeScene, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> ChangeSceneAsync(global::Scene request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ChangeSceneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> ChangeSceneAsync(global::Scene request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_ChangeScene, null, options, request);
    }
    public virtual global::Empty MoveUsers(global::UserPosition request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return MoveUsers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Empty MoveUsers(global::UserPosition request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_MoveUsers, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> MoveUsersAsync(global::UserPosition request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return MoveUsersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> MoveUsersAsync(global::UserPosition request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_MoveUsers, null, options, request);
    }
    public virtual global::Empty LeaveRoom(global::RoomUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return LeaveRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Empty LeaveRoom(global::RoomUser request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_LeaveRoom, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> LeaveRoomAsync(global::RoomUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return LeaveRoomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> LeaveRoomAsync(global::RoomUser request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_LeaveRoom, null, options, request);
    }
    public virtual global::Empty ChangeMaster(global::MasterSwitch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ChangeMaster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Empty ChangeMaster(global::MasterSwitch request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_ChangeMaster, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> ChangeMasterAsync(global::MasterSwitch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return ChangeMasterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Empty> ChangeMasterAsync(global::MasterSwitch request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_ChangeMaster, null, options, request);
    }
    public virtual global::EnergyData GetEnergyData(global::RoomUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetEnergyData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::EnergyData GetEnergyData(global::RoomUser request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_GetEnergyData, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::EnergyData> GetEnergyDataAsync(global::RoomUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetEnergyDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::EnergyData> GetEnergyDataAsync(global::RoomUser request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_GetEnergyData, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override SmartEnergyTableServiceClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new SmartEnergyTableServiceClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(SmartEnergyTableServiceBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_CreateRoom, serviceImpl.CreateRoom)
        .AddMethod(__Method_JoinRoom, serviceImpl.JoinRoom)
        .AddMethod(__Method_SaveRoom, serviceImpl.SaveRoom)
        .AddMethod(__Method_AddToken, serviceImpl.AddToken)
        .AddMethod(__Method_RemoveToken, serviceImpl.RemoveToken)
        .AddMethod(__Method_MoveToken, serviceImpl.MoveToken)
        .AddMethod(__Method_ClearRoom, serviceImpl.ClearRoom)
        .AddMethod(__Method_ChangeScene, serviceImpl.ChangeScene)
        .AddMethod(__Method_MoveUsers, serviceImpl.MoveUsers)
        .AddMethod(__Method_LeaveRoom, serviceImpl.LeaveRoom)
        .AddMethod(__Method_ChangeMaster, serviceImpl.ChangeMaster)
        .AddMethod(__Method_GetEnergyData, serviceImpl.GetEnergyData).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, SmartEnergyTableServiceBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_CreateRoom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Empty, global::RoomUser>(serviceImpl.CreateRoom));
    serviceBinder.AddMethod(__Method_JoinRoom, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::RoomUser, global::Patch>(serviceImpl.JoinRoom));
    serviceBinder.AddMethod(__Method_SaveRoom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RoomUser, global::Empty>(serviceImpl.SaveRoom));
    serviceBinder.AddMethod(__Method_AddToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Token, global::Empty>(serviceImpl.AddToken));
    serviceBinder.AddMethod(__Method_RemoveToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Token, global::Empty>(serviceImpl.RemoveToken));
    serviceBinder.AddMethod(__Method_MoveToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Token, global::Empty>(serviceImpl.MoveToken));
    serviceBinder.AddMethod(__Method_ClearRoom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RoomUser, global::Empty>(serviceImpl.ClearRoom));
    serviceBinder.AddMethod(__Method_ChangeScene, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Scene, global::Empty>(serviceImpl.ChangeScene));
    serviceBinder.AddMethod(__Method_MoveUsers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::UserPosition, global::Empty>(serviceImpl.MoveUsers));
    serviceBinder.AddMethod(__Method_LeaveRoom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RoomUser, global::Empty>(serviceImpl.LeaveRoom));
    serviceBinder.AddMethod(__Method_ChangeMaster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MasterSwitch, global::Empty>(serviceImpl.ChangeMaster));
    serviceBinder.AddMethod(__Method_GetEnergyData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RoomUser, global::EnergyData>(serviceImpl.GetEnergyData));
  }

}
#endregion
