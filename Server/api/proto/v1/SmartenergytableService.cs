// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: smartenergytable-service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from smartenergytable-service.proto</summary>
public static partial class SmartenergytableServiceReflection {

  #region Descriptor
  /// <summary>File descriptor for smartenergytable-service.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SmartenergytableServiceReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch5zbWFydGVuZXJneXRhYmxlLXNlcnZpY2UucHJvdG8iBwoFRW1wdHkiuwEK",
          "BVRva2VuEhwKCXJvb21fdXNlchgBIAEoCzIJLlJvb21Vc2VyEhQKDG9iamVj",
          "dF9pbmRleBgCIAEoBRIjCghwb3NpdGlvbhgDIAEoCzIRLlZlY3RvcjNfUHJv",
          "dG9jb2wSEQoJb2JqZWN0X2lkGAQgASgJEiMKCHJvdGF0aW9uGAUgASgLMhEu",
          "VmVjdG9yM19Qcm90b2NvbBINCgVzY2FsZRgGIAEoAhISCgplZmZpY2llbmN5",
          "GAcgASgFIjMKEFZlY3RvcjNfUHJvdG9jb2wSCQoBeBgBIAEoAhIJCgF5GAIg",
          "ASgCEgkKAXoYAyABKAIiJwoIUm9vbVVzZXISCgoCaWQYASABKAkSDwoHdXNl",
          "cl9pZBgCIAEoCSJVCgxVc2VyUG9zaXRpb24SHAoJcm9vbV91c2VyGAEgASgL",
          "MgkuUm9vbVVzZXISJwoMbmV3X3Bvc2l0aW9uGAIgASgLMhEuVmVjdG9yM19Q",
          "cm90b2NvbCJECgxNYXN0ZXJTd2l0Y2gSCgoCaWQYASABKAkSEQoJbWFzdGVy",
          "X2lkGAIgASgJEhUKDW5ld19tYXN0ZXJfaWQYAyABKAkiNgoFU2NlbmUSHAoJ",
          "cm9vbV91c2VyGAEgASgLMgkuUm9vbVVzZXISDwoHc2NlbmVJZBgCIAEoBSJk",
          "CgREaWZmEhwKBmFjdGlvbhgBIAEoDjIMLkRpZmYuQWN0aW9uEhUKBXRva2Vu",
          "GAIgASgLMgYuVG9rZW4iJwoGQWN0aW9uEgcKA0FERBAAEgoKBkRFTEVURRAB",
          "EggKBE1PVkUQAiIMCgpFbmVyZ3lEYXRhIrcBCgVQYXRjaBIPCgdyb29tX2lk",
          "GAEgASgJEhAKCHNjZW5lX2lkGAIgASgFEigKDXVzZXJfcG9zaXRpb24YAyAB",
          "KAsyES5WZWN0b3IzX1Byb3RvY29sEhEKCWlzX21hc3RlchgEIAEoCBIUCgVk",
          "aWZmcxgFIAMoCzIFLkRpZmYSFgoHaGlzdG9yeRgHIAMoCzIFLkRpZmYSIAoL",
          "ZW5lcmd5X2RhdGEYCCABKAsyCy5FbmVyZ3lEYXRhMpIDChdTbWFydEVuZXJn",
          "eVRhYmxlU2VydmljZRIhCgpDcmVhdGVSb29tEgYuRW1wdHkaCS5Sb29tVXNl",
          "ciIAEiEKCEpvaW5Sb29tEgkuUm9vbVVzZXIaBi5QYXRjaCIAMAESHwoIU2F2",
          "ZVJvb20SCS5Sb29tVXNlchoGLkVtcHR5IgASHAoIQWRkVG9rZW4SBi5Ub2tl",
          "bhoGLkVtcHR5IgASHwoLUmVtb3ZlVG9rZW4SBi5Ub2tlbhoGLkVtcHR5IgAS",
          "HQoJTW92ZVRva2VuEgYuVG9rZW4aBi5FbXB0eSIAEiAKCUNsZWFyUm9vbRIJ",
          "LlJvb21Vc2VyGgYuRW1wdHkiABIfCgtDaGFuZ2VTY2VuZRIGLlNjZW5lGgYu",
          "RW1wdHkiABIkCglNb3ZlVXNlcnMSDS5Vc2VyUG9zaXRpb24aBi5FbXB0eSIA",
          "EiAKCUxlYXZlUm9vbRIJLlJvb21Vc2VyGgYuRW1wdHkiABInCgxDaGFuZ2VN",
          "YXN0ZXISDS5NYXN0ZXJTd2l0Y2gaBi5FbXB0eSIAQgxaCnBrZy9hcGkvdjFi",
          "BnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Empty), global::Empty.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Token), global::Token.Parser, new[]{ "RoomUser", "ObjectIndex", "Position", "ObjectId", "Rotation", "Scale", "Efficiency" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Vector3_Protocol), global::Vector3_Protocol.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomUser), global::RoomUser.Parser, new[]{ "Id", "UserId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserPosition), global::UserPosition.Parser, new[]{ "RoomUser", "NewPosition" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MasterSwitch), global::MasterSwitch.Parser, new[]{ "Id", "MasterId", "NewMasterId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Scene), global::Scene.Parser, new[]{ "RoomUser", "SceneId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Diff), global::Diff.Parser, new[]{ "Action", "Token" }, null, new[]{ typeof(global::Diff.Types.Action) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnergyData), global::EnergyData.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Patch), global::Patch.Parser, new[]{ "RoomId", "SceneId", "UserPosition", "IsMaster", "Diffs", "History", "EnergyData" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Empty : pb::IMessage<Empty> {
  private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Empty> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Empty() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Empty(Empty other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Empty Clone() {
    return new Empty(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Empty);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Empty other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Empty other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class Token : pb::IMessage<Token> {
  private static readonly pb::MessageParser<Token> _parser = new pb::MessageParser<Token>(() => new Token());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Token> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Token() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Token(Token other) : this() {
    roomUser_ = other.roomUser_ != null ? other.roomUser_.Clone() : null;
    objectIndex_ = other.objectIndex_;
    position_ = other.position_ != null ? other.position_.Clone() : null;
    objectId_ = other.objectId_;
    rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
    scale_ = other.scale_;
    efficiency_ = other.efficiency_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Token Clone() {
    return new Token(this);
  }

  /// <summary>Field number for the "room_user" field.</summary>
  public const int RoomUserFieldNumber = 1;
  private global::RoomUser roomUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomUser RoomUser {
    get { return roomUser_; }
    set {
      roomUser_ = value;
    }
  }

  /// <summary>Field number for the "object_index" field.</summary>
  public const int ObjectIndexFieldNumber = 2;
  private int objectIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ObjectIndex {
    get { return objectIndex_; }
    set {
      objectIndex_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 3;
  private global::Vector3_Protocol position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector3_Protocol Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "object_id" field.</summary>
  public const int ObjectIdFieldNumber = 4;
  private string objectId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ObjectId {
    get { return objectId_; }
    set {
      objectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 5;
  private global::Vector3_Protocol rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector3_Protocol Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "scale" field.</summary>
  public const int ScaleFieldNumber = 6;
  private float scale_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Scale {
    get { return scale_; }
    set {
      scale_ = value;
    }
  }

  /// <summary>Field number for the "efficiency" field.</summary>
  public const int EfficiencyFieldNumber = 7;
  private int efficiency_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Efficiency {
    get { return efficiency_; }
    set {
      efficiency_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Token);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Token other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RoomUser, other.RoomUser)) return false;
    if (ObjectIndex != other.ObjectIndex) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (ObjectId != other.ObjectId) return false;
    if (!object.Equals(Rotation, other.Rotation)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
    if (Efficiency != other.Efficiency) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (roomUser_ != null) hash ^= RoomUser.GetHashCode();
    if (ObjectIndex != 0) hash ^= ObjectIndex.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (ObjectId.Length != 0) hash ^= ObjectId.GetHashCode();
    if (rotation_ != null) hash ^= Rotation.GetHashCode();
    if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
    if (Efficiency != 0) hash ^= Efficiency.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (roomUser_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RoomUser);
    }
    if (ObjectIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ObjectIndex);
    }
    if (position_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Position);
    }
    if (ObjectId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ObjectId);
    }
    if (rotation_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Rotation);
    }
    if (Scale != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Scale);
    }
    if (Efficiency != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Efficiency);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (roomUser_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomUser);
    }
    if (ObjectIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjectIndex);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (ObjectId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectId);
    }
    if (rotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
    }
    if (Scale != 0F) {
      size += 1 + 4;
    }
    if (Efficiency != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Efficiency);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Token other) {
    if (other == null) {
      return;
    }
    if (other.roomUser_ != null) {
      if (roomUser_ == null) {
        RoomUser = new global::RoomUser();
      }
      RoomUser.MergeFrom(other.RoomUser);
    }
    if (other.ObjectIndex != 0) {
      ObjectIndex = other.ObjectIndex;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        Position = new global::Vector3_Protocol();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.ObjectId.Length != 0) {
      ObjectId = other.ObjectId;
    }
    if (other.rotation_ != null) {
      if (rotation_ == null) {
        Rotation = new global::Vector3_Protocol();
      }
      Rotation.MergeFrom(other.Rotation);
    }
    if (other.Scale != 0F) {
      Scale = other.Scale;
    }
    if (other.Efficiency != 0) {
      Efficiency = other.Efficiency;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (roomUser_ == null) {
            RoomUser = new global::RoomUser();
          }
          input.ReadMessage(RoomUser);
          break;
        }
        case 16: {
          ObjectIndex = input.ReadInt32();
          break;
        }
        case 26: {
          if (position_ == null) {
            Position = new global::Vector3_Protocol();
          }
          input.ReadMessage(Position);
          break;
        }
        case 34: {
          ObjectId = input.ReadString();
          break;
        }
        case 42: {
          if (rotation_ == null) {
            Rotation = new global::Vector3_Protocol();
          }
          input.ReadMessage(Rotation);
          break;
        }
        case 53: {
          Scale = input.ReadFloat();
          break;
        }
        case 56: {
          Efficiency = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Vector3_Protocol : pb::IMessage<Vector3_Protocol> {
  private static readonly pb::MessageParser<Vector3_Protocol> _parser = new pb::MessageParser<Vector3_Protocol>(() => new Vector3_Protocol());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Vector3_Protocol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector3_Protocol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector3_Protocol(Vector3_Protocol other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector3_Protocol Clone() {
    return new Vector3_Protocol(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Vector3_Protocol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Vector3_Protocol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Vector3_Protocol other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class RoomUser : pb::IMessage<RoomUser> {
  private static readonly pb::MessageParser<RoomUser> _parser = new pb::MessageParser<RoomUser>(() => new RoomUser());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomUser> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomUser() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomUser(RoomUser other) : this() {
    id_ = other.id_;
    userId_ = other.userId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomUser Clone() {
    return new RoomUser(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 2;
  private string userId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserId {
    get { return userId_; }
    set {
      userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomUser);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomUser other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (UserId != other.UserId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (UserId.Length != 0) hash ^= UserId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (UserId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(UserId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (UserId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomUser other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.UserId.Length != 0) {
      UserId = other.UserId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          UserId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class UserPosition : pb::IMessage<UserPosition> {
  private static readonly pb::MessageParser<UserPosition> _parser = new pb::MessageParser<UserPosition>(() => new UserPosition());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserPosition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserPosition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserPosition(UserPosition other) : this() {
    roomUser_ = other.roomUser_ != null ? other.roomUser_.Clone() : null;
    newPosition_ = other.newPosition_ != null ? other.newPosition_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserPosition Clone() {
    return new UserPosition(this);
  }

  /// <summary>Field number for the "room_user" field.</summary>
  public const int RoomUserFieldNumber = 1;
  private global::RoomUser roomUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomUser RoomUser {
    get { return roomUser_; }
    set {
      roomUser_ = value;
    }
  }

  /// <summary>Field number for the "new_position" field.</summary>
  public const int NewPositionFieldNumber = 2;
  private global::Vector3_Protocol newPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector3_Protocol NewPosition {
    get { return newPosition_; }
    set {
      newPosition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserPosition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserPosition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RoomUser, other.RoomUser)) return false;
    if (!object.Equals(NewPosition, other.NewPosition)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (roomUser_ != null) hash ^= RoomUser.GetHashCode();
    if (newPosition_ != null) hash ^= NewPosition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (roomUser_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RoomUser);
    }
    if (newPosition_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(NewPosition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (roomUser_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomUser);
    }
    if (newPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewPosition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserPosition other) {
    if (other == null) {
      return;
    }
    if (other.roomUser_ != null) {
      if (roomUser_ == null) {
        RoomUser = new global::RoomUser();
      }
      RoomUser.MergeFrom(other.RoomUser);
    }
    if (other.newPosition_ != null) {
      if (newPosition_ == null) {
        NewPosition = new global::Vector3_Protocol();
      }
      NewPosition.MergeFrom(other.NewPosition);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (roomUser_ == null) {
            RoomUser = new global::RoomUser();
          }
          input.ReadMessage(RoomUser);
          break;
        }
        case 18: {
          if (newPosition_ == null) {
            NewPosition = new global::Vector3_Protocol();
          }
          input.ReadMessage(NewPosition);
          break;
        }
      }
    }
  }

}

public sealed partial class MasterSwitch : pb::IMessage<MasterSwitch> {
  private static readonly pb::MessageParser<MasterSwitch> _parser = new pb::MessageParser<MasterSwitch>(() => new MasterSwitch());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MasterSwitch> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MasterSwitch() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MasterSwitch(MasterSwitch other) : this() {
    id_ = other.id_;
    masterId_ = other.masterId_;
    newMasterId_ = other.newMasterId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MasterSwitch Clone() {
    return new MasterSwitch(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "master_id" field.</summary>
  public const int MasterIdFieldNumber = 2;
  private string masterId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MasterId {
    get { return masterId_; }
    set {
      masterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "new_master_id" field.</summary>
  public const int NewMasterIdFieldNumber = 3;
  private string newMasterId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NewMasterId {
    get { return newMasterId_; }
    set {
      newMasterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MasterSwitch);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MasterSwitch other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (MasterId != other.MasterId) return false;
    if (NewMasterId != other.NewMasterId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (MasterId.Length != 0) hash ^= MasterId.GetHashCode();
    if (NewMasterId.Length != 0) hash ^= NewMasterId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (MasterId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(MasterId);
    }
    if (NewMasterId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(NewMasterId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (MasterId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MasterId);
    }
    if (NewMasterId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NewMasterId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MasterSwitch other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.MasterId.Length != 0) {
      MasterId = other.MasterId;
    }
    if (other.NewMasterId.Length != 0) {
      NewMasterId = other.NewMasterId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          MasterId = input.ReadString();
          break;
        }
        case 26: {
          NewMasterId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Scene : pb::IMessage<Scene> {
  private static readonly pb::MessageParser<Scene> _parser = new pb::MessageParser<Scene>(() => new Scene());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Scene> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Scene() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Scene(Scene other) : this() {
    roomUser_ = other.roomUser_ != null ? other.roomUser_.Clone() : null;
    sceneId_ = other.sceneId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Scene Clone() {
    return new Scene(this);
  }

  /// <summary>Field number for the "room_user" field.</summary>
  public const int RoomUserFieldNumber = 1;
  private global::RoomUser roomUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomUser RoomUser {
    get { return roomUser_; }
    set {
      roomUser_ = value;
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private int sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Scene);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Scene other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RoomUser, other.RoomUser)) return false;
    if (SceneId != other.SceneId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (roomUser_ != null) hash ^= RoomUser.GetHashCode();
    if (SceneId != 0) hash ^= SceneId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (roomUser_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RoomUser);
    }
    if (SceneId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SceneId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (roomUser_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomUser);
    }
    if (SceneId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Scene other) {
    if (other == null) {
      return;
    }
    if (other.roomUser_ != null) {
      if (roomUser_ == null) {
        RoomUser = new global::RoomUser();
      }
      RoomUser.MergeFrom(other.RoomUser);
    }
    if (other.SceneId != 0) {
      SceneId = other.SceneId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (roomUser_ == null) {
            RoomUser = new global::RoomUser();
          }
          input.ReadMessage(RoomUser);
          break;
        }
        case 16: {
          SceneId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Diff : pb::IMessage<Diff> {
  private static readonly pb::MessageParser<Diff> _parser = new pb::MessageParser<Diff>(() => new Diff());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Diff> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Diff() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Diff(Diff other) : this() {
    action_ = other.action_;
    token_ = other.token_ != null ? other.token_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Diff Clone() {
    return new Diff(this);
  }

  /// <summary>Field number for the "action" field.</summary>
  public const int ActionFieldNumber = 1;
  private global::Diff.Types.Action action_ = global::Diff.Types.Action.Add;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Diff.Types.Action Action {
    get { return action_; }
    set {
      action_ = value;
    }
  }

  /// <summary>Field number for the "token" field.</summary>
  public const int TokenFieldNumber = 2;
  private global::Token token_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Token Token {
    get { return token_; }
    set {
      token_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Diff);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Diff other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Action != other.Action) return false;
    if (!object.Equals(Token, other.Token)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Action != global::Diff.Types.Action.Add) hash ^= Action.GetHashCode();
    if (token_ != null) hash ^= Token.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Action != global::Diff.Types.Action.Add) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Action);
    }
    if (token_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Token);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Action != global::Diff.Types.Action.Add) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
    }
    if (token_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Diff other) {
    if (other == null) {
      return;
    }
    if (other.Action != global::Diff.Types.Action.Add) {
      Action = other.Action;
    }
    if (other.token_ != null) {
      if (token_ == null) {
        Token = new global::Token();
      }
      Token.MergeFrom(other.Token);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Action = (global::Diff.Types.Action) input.ReadEnum();
          break;
        }
        case 18: {
          if (token_ == null) {
            Token = new global::Token();
          }
          input.ReadMessage(Token);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Diff message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Action {
      [pbr::OriginalName("ADD")] Add = 0,
      [pbr::OriginalName("DELETE")] Delete = 1,
      [pbr::OriginalName("MOVE")] Move = 2,
    }

  }
  #endregion

}

/// <summary>
///Data from API?
/// </summary>
public sealed partial class EnergyData : pb::IMessage<EnergyData> {
  private static readonly pb::MessageParser<EnergyData> _parser = new pb::MessageParser<EnergyData>(() => new EnergyData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnergyData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnergyData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnergyData(EnergyData other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnergyData Clone() {
    return new EnergyData(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnergyData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnergyData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnergyData other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class Patch : pb::IMessage<Patch> {
  private static readonly pb::MessageParser<Patch> _parser = new pb::MessageParser<Patch>(() => new Patch());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Patch> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SmartenergytableServiceReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Patch() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Patch(Patch other) : this() {
    roomId_ = other.roomId_;
    sceneId_ = other.sceneId_;
    userPosition_ = other.userPosition_ != null ? other.userPosition_.Clone() : null;
    isMaster_ = other.isMaster_;
    diffs_ = other.diffs_.Clone();
    history_ = other.history_.Clone();
    energyData_ = other.energyData_ != null ? other.energyData_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Patch Clone() {
    return new Patch(this);
  }

  /// <summary>Field number for the "room_id" field.</summary>
  public const int RoomIdFieldNumber = 1;
  private string roomId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomId {
    get { return roomId_; }
    set {
      roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "scene_id" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private int sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "user_position" field.</summary>
  public const int UserPositionFieldNumber = 3;
  private global::Vector3_Protocol userPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector3_Protocol UserPosition {
    get { return userPosition_; }
    set {
      userPosition_ = value;
    }
  }

  /// <summary>Field number for the "is_master" field.</summary>
  public const int IsMasterFieldNumber = 4;
  private bool isMaster_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsMaster {
    get { return isMaster_; }
    set {
      isMaster_ = value;
    }
  }

  /// <summary>Field number for the "diffs" field.</summary>
  public const int DiffsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::Diff> _repeated_diffs_codec
      = pb::FieldCodec.ForMessage(42, global::Diff.Parser);
  private readonly pbc::RepeatedField<global::Diff> diffs_ = new pbc::RepeatedField<global::Diff>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Diff> Diffs {
    get { return diffs_; }
  }

  /// <summary>Field number for the "history" field.</summary>
  public const int HistoryFieldNumber = 7;
  private static readonly pb::FieldCodec<global::Diff> _repeated_history_codec
      = pb::FieldCodec.ForMessage(58, global::Diff.Parser);
  private readonly pbc::RepeatedField<global::Diff> history_ = new pbc::RepeatedField<global::Diff>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Diff> History {
    get { return history_; }
  }

  /// <summary>Field number for the "energy_data" field.</summary>
  public const int EnergyDataFieldNumber = 8;
  private global::EnergyData energyData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnergyData EnergyData {
    get { return energyData_; }
    set {
      energyData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Patch);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Patch other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomId != other.RoomId) return false;
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(UserPosition, other.UserPosition)) return false;
    if (IsMaster != other.IsMaster) return false;
    if(!diffs_.Equals(other.diffs_)) return false;
    if(!history_.Equals(other.history_)) return false;
    if (!object.Equals(EnergyData, other.EnergyData)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
    if (SceneId != 0) hash ^= SceneId.GetHashCode();
    if (userPosition_ != null) hash ^= UserPosition.GetHashCode();
    if (IsMaster != false) hash ^= IsMaster.GetHashCode();
    hash ^= diffs_.GetHashCode();
    hash ^= history_.GetHashCode();
    if (energyData_ != null) hash ^= EnergyData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(RoomId);
    }
    if (SceneId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SceneId);
    }
    if (userPosition_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(UserPosition);
    }
    if (IsMaster != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsMaster);
    }
    diffs_.WriteTo(output, _repeated_diffs_codec);
    history_.WriteTo(output, _repeated_history_codec);
    if (energyData_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(EnergyData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
    }
    if (SceneId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
    }
    if (userPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPosition);
    }
    if (IsMaster != false) {
      size += 1 + 1;
    }
    size += diffs_.CalculateSize(_repeated_diffs_codec);
    size += history_.CalculateSize(_repeated_history_codec);
    if (energyData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnergyData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Patch other) {
    if (other == null) {
      return;
    }
    if (other.RoomId.Length != 0) {
      RoomId = other.RoomId;
    }
    if (other.SceneId != 0) {
      SceneId = other.SceneId;
    }
    if (other.userPosition_ != null) {
      if (userPosition_ == null) {
        UserPosition = new global::Vector3_Protocol();
      }
      UserPosition.MergeFrom(other.UserPosition);
    }
    if (other.IsMaster != false) {
      IsMaster = other.IsMaster;
    }
    diffs_.Add(other.diffs_);
    history_.Add(other.history_);
    if (other.energyData_ != null) {
      if (energyData_ == null) {
        EnergyData = new global::EnergyData();
      }
      EnergyData.MergeFrom(other.EnergyData);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RoomId = input.ReadString();
          break;
        }
        case 16: {
          SceneId = input.ReadInt32();
          break;
        }
        case 26: {
          if (userPosition_ == null) {
            UserPosition = new global::Vector3_Protocol();
          }
          input.ReadMessage(UserPosition);
          break;
        }
        case 32: {
          IsMaster = input.ReadBool();
          break;
        }
        case 42: {
          diffs_.AddEntriesFrom(input, _repeated_diffs_codec);
          break;
        }
        case 58: {
          history_.AddEntriesFrom(input, _repeated_history_codec);
          break;
        }
        case 66: {
          if (energyData_ == null) {
            EnergyData = new global::EnergyData();
          }
          input.ReadMessage(EnergyData);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
